version: '3.8'

services:

  llm_wx:
    build:
      context: .
    container_name: llm_wx
    ports:
      - "8081:8081" # 根据你的 Java 应用的实际端口进行调整
    depends_on:
      - kafka
      - redis
      - mysql
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/llm_wx

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  mysql:
    image: mysql:8.0 # 或者使用最新的MySQL版本
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root # 设置root用户的密码
      TZ: Asia/Shanghai
      MYSQL_DATABASE: llm_wx # 创建一个初始数据库
    ports:
      - "3306:3306" # 将容器的3306端口映射到宿主机的3306端口
    volumes:
      - mysql-volume:/var/lib/mysql # 持久化MySQL数据
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql


  redis:
    image: redis:alpine # 使用最新的 Redis 镜像
    container_name: redis
    ports:
      - "6379:6379"

volumes:
  mysql-volume: